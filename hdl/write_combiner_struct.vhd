-- VHDL Entity ece411.write_combiner.symbol
--
-- Created:
--          by - tkalbar2.ece411_G2 (eelnx34.ews.illinois.edu)
--          at - 23:54:27 10/19/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY write_combiner IS
   PORT( 
      MWH     : IN     std_logic;
      MWL     : IN     std_logic;
      dataout : IN     lc3b_word;
      offset  : IN     lc3b_coffset;
      oldline : IN     lc3b_oword;
      newline : OUT    lc3b_oword
   );

-- Declarations

END write_combiner ;

--
-- VHDL Architecture ece411.write_combiner.struct
--
-- Created:
--          by - tkalbar2.ece411_G2 (eelnx34.ews.illinois.edu)
--          at - 23:54:28 10/19/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF write_combiner IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL bk0           : lc3b_word;
   SIGNAL bk1           : lc3b_word;
   SIGNAL bk2           : lc3b_word;
   SIGNAL bk3           : lc3b_word;
   SIGNAL bk4           : lc3b_word;
   SIGNAL bk5           : lc3b_word;
   SIGNAL bk6           : lc3b_word;
   SIGNAL bk7           : lc3b_word;
   SIGNAL blockdataout  : lc3b_word;
   SIGNAL blockdataout1 : lc3b_word;
   SIGNAL blockdataout2 : lc3b_word;
   SIGNAL blockdataout3 : lc3b_word;
   SIGNAL blockdataout4 : lc3b_word;
   SIGNAL blockdataout5 : lc3b_word;
   SIGNAL blockdataout6 : lc3b_word;
   SIGNAL blockdataout7 : lc3b_word;
   SIGNAL w0            : std_logic;
   SIGNAL w1            : std_logic;
   SIGNAL w2            : std_logic;
   SIGNAL w3            : std_logic;
   SIGNAL w4            : std_logic;
   SIGNAL w5            : std_logic;
   SIGNAL w6            : std_logic;
   SIGNAL w7            : std_logic;


   -- Component Declarations
   COMPONENT block_sel
   PORT (
      MWH          : IN     std_logic ;
      MWL          : IN     std_logic ;
      blockdatain  : IN     lc3b_word ;
      dataout      : IN     lc3b_word ;
      sel          : IN     std_logic ;
      blockdataout : OUT    lc3b_word 
   );
   END COMPONENT;
   COMPONENT decoder38
   PORT (
      offset_d : IN     lc3b_coffset ;
      w0       : OUT    std_logic ;
      w1       : OUT    std_logic ;
      w2       : OUT    std_logic ;
      w3       : OUT    std_logic ;
      w4       : OUT    std_logic ;
      w5       : OUT    std_logic ;
      w6       : OUT    std_logic ;
      w7       : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT line_joiner
   PORT (
      bk0   : IN     lc3b_word ;
      bk1   : IN     lc3b_word ;
      bk2   : IN     lc3b_word ;
      bk3   : IN     lc3b_word ;
      bk4   : IN     lc3b_word ;
      bk5   : IN     lc3b_word ;
      bk6   : IN     lc3b_word ;
      bk7   : IN     lc3b_word ;
      oword : OUT    lc3b_oword 
   );
   END COMPONENT;
   COMPONENT line_splitter
   PORT (
      oword : IN     lc3b_oword ;
      bk0   : OUT    lc3b_word ;
      bk1   : OUT    lc3b_word ;
      bk2   : OUT    lc3b_word ;
      bk3   : OUT    lc3b_word ;
      bk4   : OUT    lc3b_word ;
      bk5   : OUT    lc3b_word ;
      bk6   : OUT    lc3b_word ;
      bk7   : OUT    lc3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : block_sel USE ENTITY ece411.block_sel;
   FOR ALL : decoder38 USE ENTITY ece411.decoder38;
   FOR ALL : line_joiner USE ENTITY ece411.line_joiner;
   FOR ALL : line_splitter USE ENTITY ece411.line_splitter;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   block0 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk0,
         dataout      => dataout,
         sel          => w0,
         blockdataout => blockdataout7
      );
   block1 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk1,
         dataout      => dataout,
         sel          => w1,
         blockdataout => blockdataout6
      );
   block2 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk2,
         dataout      => dataout,
         sel          => w2,
         blockdataout => blockdataout5
      );
   block3 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk3,
         dataout      => dataout,
         sel          => w3,
         blockdataout => blockdataout4
      );
   block4 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk4,
         dataout      => dataout,
         sel          => w4,
         blockdataout => blockdataout3
      );
   block5 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk5,
         dataout      => dataout,
         sel          => w5,
         blockdataout => blockdataout2
      );
   block6 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk6,
         dataout      => dataout,
         sel          => w6,
         blockdataout => blockdataout1
      );
   block7 : block_sel
      PORT MAP (
         MWH          => MWH,
         MWL          => MWL,
         blockdatain  => bk7,
         dataout      => dataout,
         sel          => w7,
         blockdataout => blockdataout
      );
   U_2 : decoder38
      PORT MAP (
         offset_d => offset,
         w0       => w0,
         w1       => w1,
         w2       => w2,
         w3       => w3,
         w4       => w4,
         w5       => w5,
         w6       => w6,
         w7       => w7
      );
   U_1 : line_joiner
      PORT MAP (
         bk0   => blockdataout7,
         bk1   => blockdataout6,
         bk2   => blockdataout5,
         bk3   => blockdataout4,
         bk4   => blockdataout3,
         bk5   => blockdataout2,
         bk6   => blockdataout1,
         bk7   => blockdataout,
         oword => newline
      );
   U_0 : line_splitter
      PORT MAP (
         oword => oldline,
         bk0   => bk0,
         bk1   => bk1,
         bk2   => bk2,
         bk3   => bk3,
         bk4   => bk4,
         bk5   => bk5,
         bk6   => bk6,
         bk7   => bk7
      );

END struct;
