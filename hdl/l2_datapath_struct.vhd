-- VHDL Entity ece411.L2_Datapath.symbol
--
-- Created:
--          by - rchoxi2.stdt (gllnx14.ews.illinois.edu)
--          at - 02:57:12 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Datapath IS
   PORT( 
      ADDRESS      : IN     LC3b_word;
      DATAIN       : IN     LC3b_oword;
      MREAD_L      : IN     std_logic;
      MWRITEH_L    : IN     std_logic;
      MWRITEL_L    : IN     std_logic;
      RESET_L      : IN     std_logic;
      clk          : IN     std_logic;
      in_idlehit   : IN     std_logic;
      in_load      : IN     std_logic;
      in_writeback : IN     std_logic;
      pmdataout    : IN     LC3b_oword;
      pmresp_h     : IN     std_logic;
      DATAOUT      : OUT    LC3b_oword;
      MRESP_H      : OUT    std_logic;
      PMADDRESS    : OUT    LC3b_word;
      all_access   : OUT    std_logic;
      dirty        : OUT    std_logic;
      miss         : OUT    std_logic;
      pmdatain     : OUT    LC3b_oword
   );

-- Declarations

END L2_Datapath ;

--
-- VHDL Architecture ece411.L2_Datapath.struct
--
-- Created:
--          by - rchoxi2.stdt (gllnx14.ews.illinois.edu)
--          at - 02:57:13 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF L2_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DataWrite0   : std_logic;
   SIGNAL DataWrite1   : std_logic;
   SIGNAL DataWrite2   : std_logic;
   SIGNAL DataWrite3   : std_logic;
   SIGNAL DataWrite4   : std_logic;
   SIGNAL DataWrite5   : std_logic;
   SIGNAL DataWrite6   : std_logic;
   SIGNAL DataWrite7   : std_logic;
   SIGNAL DirtyIn0     : std_logic;
   SIGNAL DirtyIn1     : std_logic;
   SIGNAL DirtyIn2     : std_logic;
   SIGNAL DirtyIn3     : std_logic;
   SIGNAL DirtyIn4     : std_logic;
   SIGNAL DirtyIn5     : std_logic;
   SIGNAL DirtyIn6     : std_logic;
   SIGNAL DirtyIn7     : std_logic;
   SIGNAL LRUout       : lc3b_reg;
   SIGNAL WB_address   : lc3b_word;
   SIGNAL WriteAccess  : std_logic;
   SIGNAL dirty_gate   : std_logic;
   SIGNAL dirtyclk     : std_logic;
   SIGNAL hit          : std_logic;
   SIGNAL hit_gate     : std_logic;
   SIGNAL hitclk       : std_logic;
   SIGNAL index        : lc3b_cindex;
   SIGNAL prehit0      : std_logic;
   SIGNAL prehit1      : std_logic;
   SIGNAL prehit2      : std_logic;
   SIGNAL prehit3      : std_logic;
   SIGNAL prehit4      : std_logic;
   SIGNAL prehit5      : std_logic;
   SIGNAL prehit6      : std_logic;
   SIGNAL prehit7      : std_logic;
   SIGNAL prehitSel    : std_logic_vector(2 DOWNTO 0);
   SIGNAL protohit     : std_logic;
   SIGNAL protohit_not : std_logic;
   SIGNAL tag          : lc3b_tag;
   SIGNAL ways_datain  : lc3b_oword;

   -- Implicit buffer signal declarations
   SIGNAL all_access_internal : std_logic;


   -- Component Declarations
   COMPONENT DataWriteLogic
   PORT (
      LRUout      : IN     lc3b_reg ;
      WriteAccess : IN     std_logic ;
      dirty_gate  : IN     std_logic ;
      in_idlehit  : IN     std_logic ;
      in_load     : IN     std_logic ;
      pmresp_h    : IN     std_logic ;
      prehit0     : IN     std_logic ;
      prehit1     : IN     std_logic ;
      prehit2     : IN     std_logic ;
      prehit3     : IN     std_logic ;
      prehit4     : IN     std_logic ;
      prehit5     : IN     std_logic ;
      prehit6     : IN     std_logic ;
      prehit7     : IN     std_logic ;
      DataWrite0  : OUT    std_logic ;
      DataWrite1  : OUT    std_logic ;
      DataWrite2  : OUT    std_logic ;
      DataWrite3  : OUT    std_logic ;
      DataWrite4  : OUT    std_logic ;
      DataWrite5  : OUT    std_logic ;
      DataWrite6  : OUT    std_logic ;
      DataWrite7  : OUT    std_logic ;
      DirtyIn0    : OUT    std_logic ;
      DirtyIn1    : OUT    std_logic ;
      DirtyIn2    : OUT    std_logic ;
      DirtyIn3    : OUT    std_logic ;
      DirtyIn4    : OUT    std_logic ;
      DirtyIn5    : OUT    std_logic ;
      DirtyIn6    : OUT    std_logic ;
      DirtyIn7    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRU2
   PORT (
      RESET_L   : IN     std_logic ;
      hit       : IN     std_logic ;
      index     : IN     lc3b_cindex ;
      prehitSel : IN     std_logic_vector (2 DOWNTO 0);
      LRUout    : OUT    lc3b_reg 
   );
   END COMPONENT;
   COMPONENT Ways
   PORT (
      DataWrite0 : IN     std_logic ;
      DataWrite1 : IN     std_logic ;
      DataWrite2 : IN     std_logic ;
      DataWrite3 : IN     std_logic ;
      DataWrite4 : IN     std_logic ;
      DataWrite5 : IN     std_logic ;
      DataWrite6 : IN     std_logic ;
      DataWrite7 : IN     std_logic ;
      Datain     : IN     lc3b_oword ;
      DirtyIn0   : IN     std_logic ;
      DirtyIn1   : IN     std_logic ;
      DirtyIn2   : IN     std_logic ;
      DirtyIn3   : IN     std_logic ;
      DirtyIn4   : IN     std_logic ;
      DirtyIn5   : IN     std_logic ;
      DirtyIn6   : IN     std_logic ;
      DirtyIn7   : IN     std_logic ;
      LRUout     : IN     lc3b_reg ;
      RESET_L    : IN     std_logic ;
      TagIn      : IN     lc3b_tag ;
      index      : IN     lc3b_cindex ;
      Dirty      : OUT    std_logic ;
      Protohit   : OUT    std_logic ;
      WB_address : OUT    lc3b_word ;
      WayDataout : OUT    lc3b_oword ;
      pmdatain   : OUT    lc3b_oword ;
      prehit0    : OUT    std_logic ;
      prehit1    : OUT    std_logic ;
      prehit2    : OUT    std_logic ;
      prehit3    : OUT    std_logic ;
      prehit4    : OUT    std_logic ;
      prehit5    : OUT    std_logic ;
      prehit6    : OUT    std_logic ;
      prehit7    : OUT    std_logic ;
      prehitSel  : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT addr_splitter
   PORT (
      address : IN     lc3b_word ;
      index   : OUT    lc3b_cindex ;
      offset  : OUT    lc3b_coffset ;
      tag     : OUT    lc3b_tag 
   );
   END COMPONENT;
   COMPONENT and2
   PORT (
      a : IN     std_logic ;
      b : IN     std_logic ;
      s : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT and4
   PORT (
      a : IN     std_logic ;
      b : IN     std_logic ;
      c : IN     std_logic ;
      d : IN     std_logic ;
      s : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT dirtygate
   PORT (
      clk   : IN     std_logic ;
      dclk  : IN     std_logic ;
      dgate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT hitgate
   PORT (
      clk   : IN     std_logic ;
      dclk  : IN     std_logic ;
      hgate : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT mynot
   PORT (
      a : IN     std_logic ;
      s : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT nand2
   PORT (
      a : IN     std_logic ;
      b : IN     std_logic ;
      s : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT nand3
   PORT (
      a : IN     std_logic ;
      b : IN     std_logic ;
      c : IN     std_logic ;
      s : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT owordmux2
   PORT (
      a   : IN     lc3b_oword ;
      b   : IN     lc3b_oword ;
      Sel : IN     std_logic ;
      f   : OUT    lc3b_oword 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : DataWriteLogic USE ENTITY ece411.DataWriteLogic;
   FOR ALL : LRU2 USE ENTITY ece411.LRU2;
   FOR ALL : Ways USE ENTITY ece411.Ways;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : addr_splitter USE ENTITY ece411.addr_splitter;
   FOR ALL : and2 USE ENTITY ece411.and2;
   FOR ALL : and4 USE ENTITY ece411.and4;
   FOR ALL : dirtygate USE ENTITY ece411.dirtygate;
   FOR ALL : hitgate USE ENTITY ece411.hitgate;
   FOR ALL : mynot USE ENTITY ece411.mynot;
   FOR ALL : nand2 USE ENTITY ece411.nand2;
   FOR ALL : nand3 USE ENTITY ece411.nand3;
   FOR ALL : owordmux2 USE ENTITY ece411.owordmux2;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 2 eb2
   MRESP_H <= hit;
   hitclk <= clk'delayed(34 ns);
   dirtyclk <= clk'delayed(4 ns);                                 


   -- Instance port mappings.
   aDataWriteLogic : DataWriteLogic
      PORT MAP (
         LRUout      => LRUout,
         WriteAccess => WriteAccess,
         dirty_gate  => dirty_gate,
         in_idlehit  => in_idlehit,
         in_load     => in_load,
         pmresp_h    => pmresp_h,
         prehit0     => prehit0,
         prehit1     => prehit1,
         prehit2     => prehit2,
         prehit3     => prehit3,
         prehit4     => prehit4,
         prehit5     => prehit5,
         prehit6     => prehit6,
         prehit7     => prehit7,
         DataWrite0  => DataWrite0,
         DataWrite1  => DataWrite1,
         DataWrite2  => DataWrite2,
         DataWrite3  => DataWrite3,
         DataWrite4  => DataWrite4,
         DataWrite5  => DataWrite5,
         DataWrite6  => DataWrite6,
         DataWrite7  => DataWrite7,
         DirtyIn0    => DirtyIn0,
         DirtyIn1    => DirtyIn1,
         DirtyIn2    => DirtyIn2,
         DirtyIn3    => DirtyIn3,
         DirtyIn4    => DirtyIn4,
         DirtyIn5    => DirtyIn5,
         DirtyIn6    => DirtyIn6,
         DirtyIn7    => DirtyIn7
      );
   aLRU2 : LRU2
      PORT MAP (
         RESET_L   => RESET_L,
         hit       => hit,
         index     => index,
         prehitSel => prehitSel,
         LRUout    => LRUout
      );
   aWays : Ways
      PORT MAP (
         DataWrite0 => DataWrite0,
         DataWrite1 => DataWrite1,
         DataWrite2 => DataWrite2,
         DataWrite3 => DataWrite3,
         DataWrite4 => DataWrite4,
         DataWrite5 => DataWrite5,
         DataWrite6 => DataWrite6,
         DataWrite7 => DataWrite7,
         Datain     => ways_datain,
         DirtyIn0   => DirtyIn0,
         DirtyIn1   => DirtyIn1,
         DirtyIn2   => DirtyIn2,
         DirtyIn3   => DirtyIn3,
         DirtyIn4   => DirtyIn4,
         DirtyIn5   => DirtyIn5,
         DirtyIn6   => DirtyIn6,
         DirtyIn7   => DirtyIn7,
         LRUout     => LRUout,
         RESET_L    => RESET_L,
         TagIn      => tag,
         index      => index,
         Dirty      => dirty,
         Protohit   => protohit,
         WB_address => WB_address,
         WayDataout => DATAOUT,
         pmdatain   => pmdatain,
         prehit0    => prehit0,
         prehit1    => prehit1,
         prehit2    => prehit2,
         prehit3    => prehit3,
         prehit4    => prehit4,
         prehit5    => prehit5,
         prehit6    => prehit6,
         prehit7    => prehit7,
         prehitSel  => prehitSel
      );
   pmaddrMux : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => WB_address,
         Sel => in_writeback,
         F   => PMADDRESS
      );
   U_0 : addr_splitter
      PORT MAP (
         address => ADDRESS,
         index   => index,
         offset  => OPEN,
         tag     => tag
      );
   missAND : and2
      PORT MAP (
         a => protohit_not,
         b => all_access_internal,
         s => miss
      );
   hitAND : and4
      PORT MAP (
         a => hit_gate,
         b => in_idlehit,
         c => protohit,
         d => all_access_internal,
         s => hit
      );
   dg1 : dirtygate
      PORT MAP (
         clk   => clk,
         dclk  => dirtyclk,
         dgate => dirty_gate
      );
   hg1 : hitgate
      PORT MAP (
         clk   => clk,
         dclk  => hitclk,
         hgate => hit_gate
      );
   U_14 : mynot
      PORT MAP (
         a => protohit,
         s => protohit_not
      );
   WAccess : nand2
      PORT MAP (
         a => MWRITEL_L,
         b => MWRITEH_L,
         s => WriteAccess
      );
   AAccess : nand3
      PORT MAP (
         a => MWRITEL_L,
         b => MWRITEH_L,
         c => MREAD_L,
         s => all_access_internal
      );
   pmDatainMux : owordmux2
      PORT MAP (
         a   => DATAIN,
         b   => pmdataout,
         Sel => in_load,
         f   => ways_datain
      );

   -- Implicit buffered output assignments
   all_access <= all_access_internal;

END struct;
