-- VHDL Entity ece411.Ways.symbol
--
-- Created:
--          by - rchoxi2.stdt (gllnx14.ews.illinois.edu)
--          at - 00:25:07 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Ways IS
   PORT( 
      DataWrite0 : IN     std_logic;
      DataWrite1 : IN     std_logic;
      DataWrite2 : IN     std_logic;
      DataWrite3 : IN     std_logic;
      DataWrite4 : IN     std_logic;
      DataWrite5 : IN     std_logic;
      DataWrite6 : IN     std_logic;
      DataWrite7 : IN     std_logic;
      Datain     : IN     lc3b_oword;
      DirtyIn0   : IN     std_logic;
      DirtyIn1   : IN     std_logic;
      DirtyIn2   : IN     std_logic;
      DirtyIn3   : IN     std_logic;
      DirtyIn4   : IN     std_logic;
      DirtyIn5   : IN     std_logic;
      DirtyIn6   : IN     std_logic;
      DirtyIn7   : IN     std_logic;
      LRUout     : IN     lc3b_reg;
      RESET_L    : IN     std_logic;
      TagIn      : IN     lc3b_tag;
      index      : IN     lc3b_cindex;
      Dirty      : OUT    std_logic;
      Protohit   : OUT    std_logic;
      WB_address : OUT    lc3b_word;
      WayDataout : OUT    lc3b_oword;
      pmdatain   : OUT    lc3b_oword;
      prehit0    : OUT    std_logic;
      prehit1    : OUT    std_logic;
      prehit2    : OUT    std_logic;
      prehit3    : OUT    std_logic;
      prehit4    : OUT    std_logic;
      prehit5    : OUT    std_logic;
      prehit6    : OUT    std_logic;
      prehit7    : OUT    std_logic;
      prehitSel  : OUT    std_logic_vector (2 DOWNTO 0)
   );

-- Declarations

END Ways ;

--
-- VHDL Architecture ece411.Ways.struct
--
-- Created:
--          by - rchoxi2.stdt (gllnx14.ews.illinois.edu)
--          at - 00:25:08 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Ways IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL Dirty0          : std_logic;
   SIGNAL Dirty1          : std_logic;
   SIGNAL Dirty2          : std_logic;
   SIGNAL Dirty3          : std_logic;
   SIGNAL Dirty4          : std_logic;
   SIGNAL Dirty5          : std_logic;
   SIGNAL Dirty6          : std_logic;
   SIGNAL Dirty7          : std_logic;
   SIGNAL LineOut0        : lc3b_oword;
   SIGNAL LineOut1        : lc3b_oword;
   SIGNAL LineOut2        : lc3b_oword;
   SIGNAL LineOut3        : lc3b_oword;
   SIGNAL LineOut4        : lc3b_oword;
   SIGNAL LineOut5        : lc3b_oword;
   SIGNAL LineOut6        : lc3b_oword;
   SIGNAL LineOut7        : lc3b_oword;
   SIGNAL joined_address0 : lc3b_word;
   SIGNAL joined_address1 : lc3b_word;
   SIGNAL joined_address2 : lc3b_word;
   SIGNAL joined_address3 : lc3b_word;
   SIGNAL joined_address4 : lc3b_word;
   SIGNAL joined_address5 : lc3b_word;
   SIGNAL joined_address6 : lc3b_word;
   SIGNAL joined_address7 : lc3b_word;

   -- Implicit buffer signal declarations
   SIGNAL prehit0_internal   : std_logic;
   SIGNAL prehit1_internal   : std_logic;
   SIGNAL prehit2_internal   : std_logic;
   SIGNAL prehit4_internal   : std_logic;
   SIGNAL prehit5_internal   : std_logic;
   SIGNAL prehit6_internal   : std_logic;
   SIGNAL prehit7_internal   : std_logic;
   SIGNAL prehit3_internal   : std_logic;
   SIGNAL prehitSel_internal : std_logic_vector (2 DOWNTO 0);


   -- Component Declarations
   COMPONENT BigWay
   PORT (
      DataWrite      : IN     std_logic ;
      Datain         : IN     lc3b_oword ;
      DirtyIn        : IN     std_logic ;
      DirtyWrite     : IN     std_logic ;
      RESET_L        : IN     std_logic ;
      TagIn          : IN     lc3b_tag ;
      index          : IN     lc3b_cindex ;
      Dirty          : OUT    std_logic ;
      LineOut        : OUT    lc3b_oword ;
      joined_address : OUT    lc3b_word ;
      prehit         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Encoder8to3
   PORT (
      prehit0   : IN     std_logic ;
      prehit1   : IN     std_logic ;
      prehit2   : IN     std_logic ;
      prehit3   : IN     std_logic ;
      prehit4   : IN     std_logic ;
      prehit5   : IN     std_logic ;
      prehit6   : IN     std_logic ;
      prehit7   : IN     std_logic ;
      prehitSel : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT Mux8
   PORT (
      A      : IN     std_logic ;
      B      : IN     std_logic ;
      C      : IN     std_logic ;
      D      : IN     std_logic ;
      E      : IN     std_logic ;
      F      : IN     std_logic ;
      G      : IN     std_logic ;
      H      : IN     std_logic ;
      Output : OUT    std_logic ;
      Sel    : IN     lc3b_reg 
   );
   END COMPONENT;
   COMPONENT OWordMux8
   PORT (
      A      : IN     lc3b_oword ;
      B      : IN     lc3b_oword ;
      C      : IN     lc3b_oword ;
      D      : IN     lc3b_oword ;
      E      : IN     lc3b_oword ;
      F      : IN     lc3b_oword ;
      G      : IN     lc3b_oword ;
      H      : IN     lc3b_oword ;
      Output : OUT    lc3b_oword ;
      Sel    : IN     lc3b_reg 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A      : IN     lc3b_word ;
      B      : IN     lc3b_word ;
      C      : IN     lc3b_word ;
      D      : IN     lc3b_word ;
      E      : IN     lc3b_word ;
      F      : IN     lc3b_word ;
      G      : IN     lc3b_word ;
      H      : IN     lc3b_word ;
      Output : OUT    lc3b_word ;
      Sel    : IN     lc3b_reg 
   );
   END COMPONENT;
   COMPONENT or8
   PORT (
      A      : IN     std_logic ;
      B      : IN     std_logic ;
      C      : IN     std_logic ;
      D      : IN     std_logic ;
      E      : IN     std_logic ;
      F      : IN     std_logic ;
      G      : IN     std_logic ;
      H      : IN     std_logic ;
      Output : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BigWay USE ENTITY ece411.BigWay;
   FOR ALL : Encoder8to3 USE ENTITY ece411.Encoder8to3;
   FOR ALL : Mux8 USE ENTITY ece411.Mux8;
   FOR ALL : OWordMux8 USE ENTITY ece411.OWordMux8;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : or8 USE ENTITY ece411.or8;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   Way0 : BigWay
      PORT MAP (
         DataWrite      => DataWrite0,
         Datain         => Datain,
         DirtyIn        => DirtyIn0,
         DirtyWrite     => DataWrite0,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty0,
         LineOut        => LineOut0,
         joined_address => joined_address0,
         prehit         => prehit0_internal
      );
   Way1 : BigWay
      PORT MAP (
         DataWrite      => DataWrite1,
         Datain         => Datain,
         DirtyIn        => DirtyIn1,
         DirtyWrite     => DataWrite1,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty1,
         LineOut        => LineOut1,
         joined_address => joined_address1,
         prehit         => prehit1_internal
      );
   Way2 : BigWay
      PORT MAP (
         DataWrite      => DataWrite2,
         Datain         => Datain,
         DirtyIn        => DirtyIn2,
         DirtyWrite     => DataWrite2,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty2,
         LineOut        => LineOut2,
         joined_address => joined_address2,
         prehit         => prehit2_internal
      );
   Way3 : BigWay
      PORT MAP (
         DataWrite      => DataWrite3,
         Datain         => Datain,
         DirtyIn        => DirtyIn3,
         DirtyWrite     => DataWrite3,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty3,
         LineOut        => LineOut3,
         joined_address => joined_address3,
         prehit         => prehit3_internal
      );
   Way4 : BigWay
      PORT MAP (
         DataWrite      => DataWrite4,
         Datain         => Datain,
         DirtyIn        => DirtyIn4,
         DirtyWrite     => DataWrite4,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty4,
         LineOut        => LineOut4,
         joined_address => joined_address4,
         prehit         => prehit4_internal
      );
   Way5 : BigWay
      PORT MAP (
         DataWrite      => DataWrite5,
         Datain         => Datain,
         DirtyIn        => DirtyIn5,
         DirtyWrite     => DataWrite5,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty5,
         LineOut        => LineOut5,
         joined_address => joined_address5,
         prehit         => prehit5_internal
      );
   Way6 : BigWay
      PORT MAP (
         DataWrite      => DataWrite6,
         Datain         => Datain,
         DirtyIn        => DirtyIn6,
         DirtyWrite     => DataWrite6,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty6,
         LineOut        => LineOut6,
         joined_address => joined_address6,
         prehit         => prehit6_internal
      );
   Way7 : BigWay
      PORT MAP (
         DataWrite      => DataWrite7,
         Datain         => Datain,
         DirtyIn        => DirtyIn7,
         DirtyWrite     => DataWrite7,
         RESET_L        => RESET_L,
         TagIn          => TagIn,
         index          => index,
         Dirty          => Dirty7,
         LineOut        => LineOut7,
         joined_address => joined_address7,
         prehit         => prehit7_internal
      );
   EEncoder : Encoder8to3
      PORT MAP (
         prehit0   => prehit0_internal,
         prehit1   => prehit1_internal,
         prehit2   => prehit2_internal,
         prehit3   => prehit3_internal,
         prehit4   => prehit4_internal,
         prehit5   => prehit5_internal,
         prehit6   => prehit6_internal,
         prehit7   => prehit7_internal,
         prehitSel => prehitSel_internal
      );
   DirtyMux : Mux8
      PORT MAP (
         A      => Dirty0,
         B      => Dirty1,
         C      => Dirty2,
         D      => Dirty3,
         E      => Dirty4,
         F      => Dirty5,
         G      => Dirty6,
         H      => Dirty7,
         Output => Dirty,
         Sel    => LRUout
      );
   LineMux : OWordMux8
      PORT MAP (
         A      => LineOut0,
         B      => LineOut1,
         C      => LineOut2,
         D      => LineOut3,
         E      => LineOut4,
         F      => LineOut5,
         G      => LineOut6,
         H      => LineOut7,
         Output => WayDataout,
         Sel    => prehitSel_internal
      );
   WBDataMux : OWordMux8
      PORT MAP (
         A      => LineOut0,
         B      => LineOut1,
         C      => LineOut2,
         D      => LineOut3,
         E      => LineOut4,
         F      => LineOut5,
         G      => LineOut6,
         H      => LineOut7,
         Output => pmdatain,
         Sel    => LRUout
      );
   JoinedAddresMux : WordMux8
      PORT MAP (
         A      => joined_address0,
         B      => joined_address1,
         C      => joined_address2,
         D      => joined_address3,
         E      => joined_address4,
         F      => joined_address5,
         G      => joined_address6,
         H      => joined_address7,
         Output => WB_address,
         Sel    => LRUout
      );
   U_0 : or8
      PORT MAP (
         A      => prehit0_internal,
         B      => prehit1_internal,
         C      => prehit2_internal,
         D      => prehit3_internal,
         E      => prehit4_internal,
         F      => prehit5_internal,
         G      => prehit6_internal,
         H      => prehit7_internal,
         Output => Protohit
      );

   -- Implicit buffered output assignments
   prehit0   <= prehit0_internal;
   prehit1   <= prehit1_internal;
   prehit2   <= prehit2_internal;
   prehit4   <= prehit4_internal;
   prehit5   <= prehit5_internal;
   prehit6   <= prehit6_internal;
   prehit7   <= prehit7_internal;
   prehit3   <= prehit3_internal;
   prehitSel <= prehitSel_internal;

END struct;
