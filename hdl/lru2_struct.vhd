-- VHDL Entity ece411.LRU2.interface
--
-- Created:
--          by - rchoxi2.stdt (gllnx26.ews.illinois.edu)
--          at - 20:53:14 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY LRU2 IS
   PORT( 
      RESET_L   : IN     std_logic;
      hit       : IN     std_logic;
      index     : IN     lc3b_cindex;
      prehitSel : IN     std_logic_vector (2 DOWNTO 0);
      LRUout    : OUT    lc3b_reg
   );

-- Declarations

END LRU2 ;

--
-- VHDL Architecture ece411.LRU2.struct
--
-- Created:
--          by - rchoxi2.stdt (gllnx26.ews.illinois.edu)
--          at - 20:53:14 12/02/10
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF LRU2 IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL LRUout0      : lc3b_reg;
   SIGNAL LRUout1      : lc3b_reg;
   SIGNAL LRUout3      : lc3b_reg;
   SIGNAL LRUout2      : lc3b_reg;
   SIGNAL LRUout4      : lc3b_reg;
   SIGNAL LRUout5      : lc3b_reg;
   SIGNAL LRUout6      : lc3b_reg;
   SIGNAL LRUout7      : lc3b_reg;
   SIGNAL SplitIndex0  : lc3b_reg;
   SIGNAL SplitIndex1  : lc3b_reg;
   SIGNAL SplitIndex2  : lc3b_reg;
   SIGNAL SplitIndex3  : lc3b_reg;
   SIGNAL SplitIndex4  : lc3b_reg;
   SIGNAL SplitIndex5  : lc3b_reg;
   SIGNAL SplitIndex6  : lc3b_reg;
   SIGNAL SplitIndex7  : lc3b_reg;
   SIGNAL LRUShiftout  : lc3b_24;
   SIGNAL LRUShiftout1 : lc3b_24;
   SIGNAL F            : std_logic;
   SIGNAL F1           : std_logic;
   SIGNAL LRUShiftout2 : lc3b_24;
   SIGNAL LRUShiftout3 : lc3b_24;
   SIGNAL F2           : std_logic;
   SIGNAL LRUShiftout4 : lc3b_24;
   SIGNAL F3           : std_logic;
   SIGNAL LRUShiftout5 : lc3b_24;
   SIGNAL F4           : std_logic;
   SIGNAL F5           : std_logic;
   SIGNAL LRUShiftout6 : lc3b_24;
   SIGNAL LRUShiftout7 : lc3b_24;
   SIGNAL F6           : std_logic;
   SIGNAL F7           : std_logic;
   SIGNAL prehitSel1   : std_logic_vector(2 DOWNTO 0);
   SIGNAL Output       : lc3b_24;
   SIGNAL LRUout24     : lc3b_24;


   -- Component Declarations
   COMPONENT Encoder8to3
   PORT (
      prehit0   : IN     std_logic ;
      prehit1   : IN     std_logic ;
      prehit2   : IN     std_logic ;
      prehit3   : IN     std_logic ;
      prehit4   : IN     std_logic ;
      prehit5   : IN     std_logic ;
      prehit6   : IN     std_logic ;
      prehit7   : IN     std_logic ;
      prehitSel : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT LRUVector8
   PORT (
      LRUIn    : IN     lc3b_24 ;
      LRUwrite : IN     std_logic ;
      index    : IN     lc3b_cindex ;
      LRUout   : OUT    lc3b_24 ;
      LRUout0  : OUT    lc3b_reg ;
      LRUout1  : OUT    lc3b_reg ;
      LRUout2  : OUT    lc3b_reg ;
      LRUout3  : OUT    lc3b_reg ;
      LRUout4  : OUT    lc3b_reg ;
      LRUout5  : OUT    lc3b_reg ;
      LRUout6  : OUT    lc3b_reg ;
      LRUout7  : OUT    lc3b_reg ;
      RESET_L  : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT RegComp
   PORT (
      A : IN     lc3b_reg ;
      B : IN     lc3b_reg ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT SplitShifter
   PORT (
      SplitIndex  : IN     lc3b_reg ;
      LRUin       : IN     lc3b_24 ;
      LRUShiftout : OUT    lc3b_24 
   );
   END COMPONENT;
   COMPONENT TwentyFourMux8
   PORT (
      A      : IN     lc3b_24 ;
      B      : IN     lc3b_24 ;
      C      : IN     lc3b_24 ;
      D      : IN     lc3b_24 ;
      E      : IN     lc3b_24 ;
      F      : IN     lc3b_24 ;
      G      : IN     lc3b_24 ;
      H      : IN     lc3b_24 ;
      Output : OUT    lc3b_24 ;
      Sel    : IN     lc3b_reg 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Encoder8to3 USE ENTITY ece411.Encoder8to3;
   FOR ALL : LRUVector8 USE ENTITY ece411.LRUVector8;
   FOR ALL : RegComp USE ENTITY ece411.RegComp;
   FOR ALL : SplitShifter USE ENTITY ece411.SplitShifter;
   FOR ALL : TwentyFourMux8 USE ENTITY ece411.TwentyFourMux8;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   SplitIndex0 <= "000";     
   SplitIndex1 <= "001";      
   SplitIndex2 <= "010";      
   SplitIndex3 <= "011";      
   SplitIndex4 <= "100";      
   SplitIndex5 <= "101";      
   SplitIndex6 <= "110";      
   SplitIndex7 <= "111";  
   LRUout <= LRUout7;                               


   -- Instance port mappings.
   PrehitIncoder : Encoder8to3
      PORT MAP (
         prehit0   => F,
         prehit1   => F1,
         prehit2   => F2,
         prehit3   => F3,
         prehit4   => F4,
         prehit5   => F5,
         prehit6   => F6,
         prehit7   => F7,
         prehitSel => prehitSel1
      );
   aLRUVector8 : LRUVector8
      PORT MAP (
         LRUIn    => Output,
         LRUwrite => hit,
         index    => index,
         LRUout   => LRUout24,
         LRUout0  => LRUout0,
         LRUout1  => LRUout1,
         LRUout2  => LRUout2,
         LRUout3  => LRUout3,
         LRUout4  => LRUout4,
         LRUout5  => LRUout5,
         LRUout6  => LRUout6,
         LRUout7  => LRUout7,
         RESET_L  => RESET_L
      );
   Comp0 : RegComp
      PORT MAP (
         A => LRUout0,
         B => prehitSel,
         F => F
      );
   Comp1 : RegComp
      PORT MAP (
         A => LRUout1,
         B => prehitSel,
         F => F1
      );
   Comp2 : RegComp
      PORT MAP (
         A => LRUout2,
         B => prehitSel,
         F => F2
      );
   Comp3 : RegComp
      PORT MAP (
         A => LRUout3,
         B => prehitSel,
         F => F3
      );
   Comp4 : RegComp
      PORT MAP (
         A => LRUout4,
         B => prehitSel,
         F => F4
      );
   Comp5 : RegComp
      PORT MAP (
         A => LRUout5,
         B => prehitSel,
         F => F5
      );
   Comp6 : RegComp
      PORT MAP (
         A => LRUout6,
         B => prehitSel,
         F => F6
      );
   Comp7 : RegComp
      PORT MAP (
         A => LRUout7,
         B => prehitSel,
         F => F7
      );
   Shift0 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex0,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout
      );
   Shift1 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex1,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout1
      );
   Shift2 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex2,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout2
      );
   Shift3 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex3,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout3
      );
   Shift4 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex4,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout4
      );
   Shift5 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex5,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout5
      );
   Shift6 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex6,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout6
      );
   Shift7 : SplitShifter
      PORT MAP (
         SplitIndex  => SplitIndex7,
         LRUin       => LRUout24,
         LRUShiftout => LRUShiftout7
      );
   ShiftMux : TwentyFourMux8
      PORT MAP (
         A      => LRUShiftout,
         B      => LRUShiftout1,
         C      => LRUShiftout2,
         D      => LRUShiftout3,
         E      => LRUShiftout4,
         F      => LRUShiftout5,
         G      => LRUShiftout6,
         H      => LRUShiftout7,
         Output => Output,
         Sel    => prehitSel1
      );

END struct;
